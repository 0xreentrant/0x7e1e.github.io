import type { marked } from 'marked';
export declare enum PRPLSourceFileExtension {
    html = ".html"
}
export declare enum PRPLContentFileExtension {
    html = ".html",
    markdown = ".md"
}
export declare const enum PRPLClientScript {
    prefetch = "prefetch",
    prefetchWorker = "prefetch-worker",
    router = "router"
}
export declare enum PRPLTag {
    page = "page",
    list = "list"
}
export declare enum PRPLTagAttribute {
    type = "type",
    src = "src",
    sortBy = "sort-by",
    direction = "direction",
    limit = "limit"
}
export declare enum PRPLDirectionAttributeValue {
    asc = "asc",
    desc = "desc"
}
export declare enum PRPLRequiredMetadata {
    title = "title",
    slug = "slug"
}
export declare type PRPLMetadata = Record<PRPLRequiredMetadata | string, string>;
export declare enum PRPLFileSystemTreeEntity {
    directory = "directory",
    file = "file"
}
export interface PRPLFileSystemTree {
    path: string;
    name: string;
    entity: PRPLFileSystemTreeEntity;
    extension?: string;
    src?: string;
    children?: PRPLFileSystemTree[];
    srcRelativeDir?: string;
    srcRelativeFilePath?: string;
    targetFilePath?: string;
    targetDir?: string;
}
export declare enum PRPLCachePartitionKey {
    src = "src",
    content = "content",
    dist = "dist"
}
export declare type PRPLCachePartition = Record<string, PRPLFileSystemTree>;
export interface PRPLCacheManager {
    cache: Record<PRPLCachePartitionKey | string, PRPLCachePartition | any>;
    define: (partitionKey: string) => Promise<void>;
    get: (partitionKey: PRPLCachePartitionKey | string, dirPath: string) => Promise<PRPLFileSystemTree | any>;
    set: (partitionKey: PRPLCachePartitionKey | string, dirpath: string, item: PRPLFileSystemTree | any) => Promise<void>;
}
export declare type PRPLAttributeMap = {
    [key in PRPLTagAttribute]: string;
};
export declare type PRPLAttributes = {
    raw: string;
    parsed: PRPLAttributeMap;
};
export declare type PRPLClientStorageItem = {
    storageKey: string;
    storageValue: string;
};
export declare const enum PRPLClientEvent {
    render = "prpl-render"
}
export declare const enum PRPLClientPerformanceMark {
    renderStart = "prpl-render-start",
    renderEnd = "prpl-render-end"
}
export interface PRPLInterpolateOptions {
    noClientJS?: boolean;
    templateRegex?: RegExp | ((key: string) => RegExp | any);
    markedOptions?: marked.MarkedOptions;
}
