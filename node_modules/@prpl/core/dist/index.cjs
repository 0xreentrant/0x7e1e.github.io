'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var promises = require('fs/promises');
var url = require('url');
var os = require('os');
var marked = require('marked');

exports.PRPLSourceFileExtension = void 0;
(function (PRPLSourceFileExtension) {
    PRPLSourceFileExtension["html"] = ".html";
})(exports.PRPLSourceFileExtension || (exports.PRPLSourceFileExtension = {}));
exports.PRPLContentFileExtension = void 0;
(function (PRPLContentFileExtension) {
    PRPLContentFileExtension["html"] = ".html";
    PRPLContentFileExtension["markdown"] = ".md";
})(exports.PRPLContentFileExtension || (exports.PRPLContentFileExtension = {}));
exports.PRPLTag = void 0;
(function (PRPLTag) {
    PRPLTag["page"] = "page";
    PRPLTag["list"] = "list";
})(exports.PRPLTag || (exports.PRPLTag = {}));
exports.PRPLTagAttribute = void 0;
(function (PRPLTagAttribute) {
    PRPLTagAttribute["type"] = "type";
    PRPLTagAttribute["src"] = "src";
    PRPLTagAttribute["sortBy"] = "sort-by";
    PRPLTagAttribute["direction"] = "direction";
    PRPLTagAttribute["limit"] = "limit";
})(exports.PRPLTagAttribute || (exports.PRPLTagAttribute = {}));
exports.PRPLDirectionAttributeValue = void 0;
(function (PRPLDirectionAttributeValue) {
    PRPLDirectionAttributeValue["asc"] = "asc";
    PRPLDirectionAttributeValue["desc"] = "desc";
})(exports.PRPLDirectionAttributeValue || (exports.PRPLDirectionAttributeValue = {}));
exports.PRPLRequiredMetadata = void 0;
(function (PRPLRequiredMetadata) {
    PRPLRequiredMetadata["title"] = "title";
    PRPLRequiredMetadata["slug"] = "slug";
})(exports.PRPLRequiredMetadata || (exports.PRPLRequiredMetadata = {}));
exports.PRPLFileSystemTreeEntity = void 0;
(function (PRPLFileSystemTreeEntity) {
    PRPLFileSystemTreeEntity["directory"] = "directory";
    PRPLFileSystemTreeEntity["file"] = "file";
})(exports.PRPLFileSystemTreeEntity || (exports.PRPLFileSystemTreeEntity = {}));
exports.PRPLCachePartitionKey = void 0;
(function (PRPLCachePartitionKey) {
    PRPLCachePartitionKey["src"] = "src";
    PRPLCachePartitionKey["content"] = "content";
    PRPLCachePartitionKey["dist"] = "dist";
})(exports.PRPLCachePartitionKey || (exports.PRPLCachePartitionKey = {}));

async function readDirSafe(dirPath) {
    let dirData = null;
    try {
        dirData = await promises.readdir(dirPath);
    }
    catch (error) {
        if (error?.code == 'EACCES' || error?.code == 'EPERM') {
            return dirData;
        }
        else {
            throw error;
        }
    }
    return dirData;
}

async function generateFileSystemTree(args) {
    const { entityPath, readFileRegExp } = args;
    const name = path.basename(entityPath);
    const item = {
        path: entityPath,
        name,
        entity: null
    };
    let stats;
    try {
        stats = await promises.stat(entityPath);
    }
    catch (_) {
        return null;
    }
    if (stats?.isFile()) {
        const { dir, base } = path.parse(entityPath);
        item.srcRelativeDir = dir?.replace(path.resolve('.'), '');
        item.srcRelativeFilePath = `${item?.srcRelativeDir.split(path.sep).slice(1).join(path.sep)}${path.sep}${base}`;
        item.targetFilePath = entityPath?.replace('src', 'dist');
        item.targetDir = path.parse(item?.targetFilePath)?.dir;
        item.extension = path.extname(entityPath)?.toLowerCase();
        item.entity = exports.PRPLFileSystemTreeEntity.file;
        try {
            if (typeof readFileRegExp === 'object' && readFileRegExp?.constructor == RegExp) {
                if (readFileRegExp?.test(item?.extension)) {
                    const srcBuffer = await promises.readFile(item?.path);
                    item.src = srcBuffer?.toString();
                }
            }
            return item;
        }
        catch (_) { }
    }
    if (stats?.isDirectory()) {
        let entitiesInDirectory = await readDirSafe(item?.path);
        if (entitiesInDirectory === null) {
            return null;
        }
        item.children = [];
        for (let i = 0; i < entitiesInDirectory?.length; i++) {
            const child = await generateFileSystemTree({
                entityPath: path.join(item?.path, entitiesInDirectory?.[i]),
                readFileRegExp
            });
            item?.children?.push(child);
        }
        item.entity = exports.PRPLFileSystemTreeEntity.directory;
        return item;
    }
    return null;
}

const log = {
    debug(...args) {
        console.debug('\x1b[35m', '[PRPL]', ...args, '\x1b[0m');
    },
    info(...args) {
        console.info('\x1b[35m', '[PRPL]', ...args, '\x1b[0m');
    },
    warning(...args) {
        console.warn('\x1b[35m', '[PRPL]', ...args, '\x1b[0m');
    },
    error(...args) {
        console.error('\x1b[35m', '[PRPL]', ...args, '\x1b[0m');
    },
    critical(...args) {
        console.error('\x1b[35m', '[PRPL]', ...args, '\x1b[0m');
    }
};

const PRPLCache = {
    cache: {
        [exports.PRPLCachePartitionKey.src]: {},
        [exports.PRPLCachePartitionKey.content]: {},
        [exports.PRPLCachePartitionKey.dist]: {}
    },
    async define(partitionKey) {
        try {
            PRPLCache.cache[partitionKey] = {};
        }
        catch (error) {
            log.error(`Failed to define a new partition '${partitionKey}'. Error:`, error?.message);
        }
    },
    async get(partitionKey, dirPath) {
        try {
            return PRPLCache?.cache?.[partitionKey]?.[dirPath];
        }
        catch (error) {
            log.error(`Failed to get cached item '${dirPath}' in partition '${partitionKey}'. Error:`, error?.message);
        }
    },
    async set(partitionKey, dirPath, item) {
        try {
            PRPLCache.cache[partitionKey][dirPath] = item;
        }
        catch (error) {
            log.error(`Failed to cache item '${dirPath}' in partition '${partitionKey}'. Error:`, error?.message);
        }
    }
};

async function generateOrRetrieveFileSystemTree(args) {
    const { partitionKey, entityPath, readFileRegExp } = args;
    try {
        let fileSystemTree = await PRPLCache?.get(partitionKey, entityPath);
        if (!fileSystemTree) {
            fileSystemTree = await generateFileSystemTree({
                entityPath,
                readFileRegExp
            });
            await PRPLCache?.set(partitionKey, entityPath, fileSystemTree);
        }
        return fileSystemTree;
    }
    catch (error) {
        log.error(`Failed generate file system tree from '${entityPath}'. Error:`, error?.message);
    }
}

async function cwd(importMeta) {
    try {
        return path.parse(url.fileURLToPath(importMeta.url)).dir;
    }
    catch (error) {
        log.error('Failed to get current working directory. Error:', error?.message);
    }
}

async function ensureDir(dir) {
    try {
        const fileInfo = await promises.stat(dir);
        if (!fileInfo.isDirectory()) {
            log.error(`There is no directory at path '${dir}'.`);
        }
    }
    catch (error) {
        if (error?.code === 'ENOENT') {
            await promises.mkdir(dir, { recursive: true });
            return;
        }
        log.error(`Failed to ensure '${dir}' exists. Error:`, error?.message);
    }
}

async function parsePRPLAttributes(args) {
    const { html } = args || {};
    return [...html?.matchAll(/<prpl(.*?)>/gs)]
        .map((attrs) => attrs?.[1]?.trim())
        .reduce((attrsCollection, attrs) => {
        attrsCollection?.push({
            raw: attrs,
            parsed: [...attrs?.matchAll(/\s*((.*?)="(.*?)")/g)]?.reduce((acc, curr) => {
                return {
                    ...acc,
                    [curr?.[2]]: curr?.[3]
                };
            }, {})
        });
        return attrsCollection;
    }, []);
}

async function parsePRPLMetadata(args) {
    const { src, srcRelativeFilePath } = args || {};
    let metadata;
    let body;
    try {
        const metadataStringRegex = new RegExp(`${os.EOL}$`, 's');
        const metadataString = /<!--(.*?)-->/s?.exec(src)?.[1]?.replace(metadataStringRegex, '');
        const metadataArrayRegex = new RegExp(`${os.EOL}(.*?): `, 'm');
        const metadataArray = metadataString?.split(metadataArrayRegex)?.slice(1);
        metadata = metadataArray?.reduce((acc, curr, index) => {
            if (!(index % 2)) {
                acc[curr] = metadataArray?.[index + 1];
            }
            return acc;
        }, {});
        const metadataBodyRegex = new RegExp(`-->${os.EOL}(.*?)$`, 's');
        body = metadataBodyRegex.exec(src)?.[1];
    }
    catch (error) {
        console.error(`Unable to parse metadata${srcRelativeFilePath ? ` in page ${srcRelativeFilePath}` : ''}. Metadata must be at the top of your file with at least a title and slug property:
    <!--
    title: Hello world!
    slug: hello-world
    -->`);
    }
    return {
        ...metadata,
        body
    };
}

async function interpolateList(args) {
    const { srcTree, contentDir, attrs, options = {} } = args || {};
    const contentTreeReadFileRegExp = new RegExp(`${exports.PRPLContentFileExtension.html}|${exports.PRPLContentFileExtension.markdown}`);
    const contentTree = await generateOrRetrieveFileSystemTree({
        partitionKey: exports.PRPLCachePartitionKey.content,
        entityPath: contentDir,
        readFileRegExp: contentTreeReadFileRegExp
    });
    const contentFiles = contentTree?.children || [];
    const listRegex = new RegExp(`(<prpl\\s+${attrs?.raw}\\s?>)(.*?)<\/prpl>`, 's');
    const PRPLListTemplate = srcTree?.src?.match(listRegex)?.[2];
    let fragmentList = [];
    listLoop: for (let i = 0; i < contentFiles?.length; i++) {
        if (contentFiles?.[i]?.entity === exports.PRPLFileSystemTreeEntity.directory) {
            continue listLoop;
        }
        let metadata;
        switch (contentFiles?.[i]?.extension) {
            case exports.PRPLContentFileExtension.html:
            case exports.PRPLContentFileExtension.markdown:
                metadata = await parsePRPLMetadata({
                    src: contentFiles?.[i]?.src,
                    srcRelativeFilePath: contentFiles?.[i]?.srcRelativeFilePath
                });
                break;
            default:
                log.error(`Unsupported content file extension '${contentFiles?.[i]?.extension}' from '${contentFiles?.[i]?.srcRelativeFilePath}'. Supported content file extensions include: '.html' and '.md'.`);
                fragmentList?.push({
                    metadata: {},
                    fragment: ''
                });
                continue;
        }
        let prplTemplateInstance = String(PRPLListTemplate);
        for (const key in metadata) {
            const regex = typeof options?.templateRegex === 'function'
                ? options?.templateRegex(key)
                : new RegExp(`\\[${key}\\]`, 'g');
            prplTemplateInstance = prplTemplateInstance?.replace(regex, metadata?.[key]);
        }
        fragmentList?.push({
            metadata,
            fragment: prplTemplateInstance
        });
    }
    if (exports.PRPLTagAttribute.sortBy in attrs?.parsed) {
        const sort = attrs?.parsed?.[exports.PRPLTagAttribute.sortBy];
        let direction = attrs?.parsed?.[exports.PRPLTagAttribute.direction] || exports.PRPLDirectionAttributeValue.asc;
        try {
            fragmentList = fragmentList?.sort((first, second) => {
                let firstComparator = first?.metadata?.[sort];
                let secondComparator = second?.metadata?.[sort];
                if (sort?.toLowerCase() === 'date' || sort?.toLowerCase() === 'time') {
                    firstComparator = new Date(firstComparator)?.getTime();
                    secondComparator = new Date(secondComparator)?.getTime();
                    return direction === exports.PRPLDirectionAttributeValue.asc
                        ? firstComparator - secondComparator
                        : secondComparator - firstComparator;
                }
                if (firstComparator === secondComparator) {
                    return 0;
                }
                return direction === exports.PRPLDirectionAttributeValue.asc
                    ? firstComparator > secondComparator
                        ? 1
                        : -1
                    : secondComparator < firstComparator
                        ? -1
                        : 1;
            });
        }
        catch (error) {
            log.error(`Failed to sort by '${sort}' in ${srcTree?.srcRelativeFilePath}. Error:`, error?.message);
        }
    }
    if (exports.PRPLTagAttribute.limit in attrs?.parsed) {
        const limit = Number(attrs?.parsed?.[exports.PRPLTagAttribute.limit]);
        try {
            fragmentList = fragmentList?.slice(0, limit);
        }
        catch (error) {
            log.error(`Failed to limit to '${limit}' in ${srcTree?.srcRelativeFilePath}. Error:`, error?.message);
        }
    }
    return fragmentList?.map((item) => item?.fragment).join('');
}

const renderer = {
    code(code, lang) {
        return `<pre class="language-${lang}"><code class="language-${lang}">${code}</code></pre>`;
    }
};
marked.marked.use({ renderer });
async function transformMarkdown(args) {
    const { markdown, options = {} } = args || {};
    return marked.marked(markdown, options?.markedOptions);
}

async function interpolatePage(args) {
    const { srcTree, contentDir, attrs = [], options = {} } = args || {};
    const contentTreeReadFileRegExp = new RegExp(`${exports.PRPLContentFileExtension.html}|${exports.PRPLContentFileExtension.markdown}`);
    const contentTree = await generateOrRetrieveFileSystemTree({
        partitionKey: exports.PRPLCachePartitionKey.content,
        entityPath: contentDir,
        readFileRegExp: contentTreeReadFileRegExp
    });
    const contentFiles = contentTree?.children || [];
    const listAttrs = attrs?.slice(1);
    let listFragmentMap = {};
    for (let a = 0; a < listAttrs?.length; a++) {
        listFragmentMap[listAttrs?.[a]?.raw] = await interpolateList({
            srcTree,
            contentDir,
            attrs: listAttrs?.[a],
            options
        });
    }
    pageLoop: for (let p = 0; p < contentFiles?.length; p++) {
        if (contentFiles?.[p]?.entity === exports.PRPLFileSystemTreeEntity.directory) {
            continue pageLoop;
        }
        const page = {
            ...srcTree,
            name: contentFiles?.[p]?.name,
            extension: contentFiles?.[p]?.extension,
            targetFilePath: srcTree?.targetFilePath?.replace(srcTree?.name, contentFiles?.[p]?.name)
        };
        let metadata;
        switch (page?.extension) {
            case exports.PRPLContentFileExtension.html:
                metadata = await parsePRPLMetadata({
                    src: contentFiles?.[p]?.src,
                    srcRelativeFilePath: contentFiles?.[p]?.srcRelativeFilePath
                });
                break;
            case exports.PRPLContentFileExtension.markdown:
                page.targetFilePath = page.targetFilePath?.replace(page?.extension, exports.PRPLSourceFileExtension.html);
                page.extension = exports.PRPLSourceFileExtension.html;
                metadata = await parsePRPLMetadata({
                    src: contentFiles?.[p]?.src,
                    srcRelativeFilePath: contentFiles?.[p]?.srcRelativeFilePath
                });
                metadata.body = await transformMarkdown({
                    markdown: metadata?.body,
                    options
                });
                break;
            default:
                log.error(`File '${contentFiles?.[p]?.srcRelativeFilePath}' has unsupported extension '${contentFiles?.[p]?.extension}'. Supported extensions include '.html' and '.md'.`);
                continue pageLoop;
        }
        for (const rawListAttrs in listFragmentMap) {
            const listRegex = new RegExp(`<prpl\\s+${rawListAttrs}\\s?>.*?<\/prpl>`, 's');
            page.src = page?.src?.replace(listRegex, listFragmentMap?.[rawListAttrs]);
        }
        let pageFragmentInstance = page?.src?.match(/(<prpl.*?>)(.*?)<\/prpl>/s)?.[2];
        for (const key in metadata) {
            const metadataKeyRegex = typeof options?.templateRegex === 'function'
                ? options?.templateRegex(key)
                : new RegExp(`\\[${key}\\]`, 'g');
            pageFragmentInstance = pageFragmentInstance?.replace(metadataKeyRegex, metadata?.[key]);
        }
        const interpolatedPage = page?.src.replace(/<prpl.*<\/prpl>/s, pageFragmentInstance);
        await promises.writeFile(page?.targetFilePath, interpolatedPage);
    }
}

async function interpolateHTML(args) {
    const { srcTree, options = {} } = args || {};
    if (!options?.noClientJS) {
        srcTree.src = srcTree?.src?.replace(/<\/head>/, `<script type="module" src="prefetch.js"></script>${os.EOL}<script type="module" src="router.js"></script>${os.EOL}</head>`);
    }
    if (!/<prpl/?.test(srcTree?.src)) {
        await promises.writeFile(srcTree?.targetFilePath, srcTree?.src);
        return;
    }
    const attrs = await parsePRPLAttributes({ html: srcTree?.src });
    const firstAttr = attrs?.[0];
    const firstPRPLAttrIsPage = firstAttr?.parsed?.[exports.PRPLTagAttribute?.type] === exports.PRPLTag.page;
    if (firstAttr && !firstPRPLAttrIsPage) {
        const page = { ...srcTree };
        for (let a = 0; a < attrs?.length; a++) {
            const contentDir = path.resolve(attrs?.[a]?.parsed?.[exports.PRPLTagAttribute?.src]);
            const listFragment = await interpolateList({
                srcTree,
                contentDir,
                attrs: attrs?.[a],
                options
            });
            const listRegex = new RegExp(`<prpl\\s+${attrs?.[a]?.raw}\\s?>.*<\/prpl>`, 's');
            page.src = page?.src?.replace(listRegex, listFragment);
        }
        await promises.writeFile(page?.targetFilePath, page?.src);
        return;
    }
    const contentDir = path.resolve(firstAttr?.parsed?.[exports.PRPLTagAttribute?.src]);
    await interpolatePage({
        srcTree,
        contentDir,
        attrs,
        options
    });
}

const PRPLClientScripts = [
    "prefetch",
    "prefetch-worker",
    "router"
];
async function interpolate(args) {
    const { options = {} } = args || {};
    await ensureDir(path.resolve('dist'));
    if (!options?.noClientJS) {
        for (let s = 0; s < PRPLClientScripts.length; s++) {
            try {
                await promises.copyFile(path.resolve(await cwd(({ url: (typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.cjs', document.baseURI).href)) })), 'client', `${PRPLClientScripts[s]}.js`), path.resolve(`dist`, `${PRPLClientScripts[s]}.js`));
            }
            catch (error) {
                log.error(`Failed to copy '${PRPLClientScripts[s]}.js' to dist. Error:`, error?.message);
            }
        }
    }
    async function walkSourceTree(items) {
        for (let i = 0; i < items.length; i++) {
            switch (items?.[i]?.entity) {
                case 'file':
                    await ensureDir(items?.[i]?.targetDir);
                    if (items?.[i]?.extension === exports.PRPLSourceFileExtension.html) {
                        await interpolateHTML({ srcTree: items?.[i], options });
                        break;
                    }
                    try {
                        await promises.copyFile(items?.[i]?.path, items?.[i]?.targetFilePath);
                    }
                    catch (error) {
                        log.error(`Failed to copy '${items?.[i]?.srcRelativeFilePath}' to dist. Error:`, error?.message);
                    }
                    break;
                case 'directory':
                    await walkSourceTree(items?.[i]?.children);
                    break;
            }
        }
    }
    const srcDir = path.resolve('src');
    const srcTreeReadFileRegExp = new RegExp(exports.PRPLSourceFileExtension.html);
    const srcTree = await generateOrRetrieveFileSystemTree({
        partitionKey: exports.PRPLCachePartitionKey.src,
        entityPath: srcDir,
        readFileRegExp: srcTreeReadFileRegExp
    });
    await walkSourceTree(srcTree?.children || []);
    log.info('Build complete');
    return PRPLCache?.cache;
}

async function ensureFile(filePath) {
    try {
        const stats = await promises.stat(filePath);
        if (!stats.isFile()) {
            log.error(`There is no file at path '${filePath}'.`);
        }
    }
    catch (error) {
        if (error?.code === 'ENOENT') {
            await ensureDir(path.dirname(filePath));
            await promises.writeFile(filePath, new Uint8Array());
            return;
        }
        log.error(`Failed to ensure '${filePath}' exists. Error:`, error?.message);
    }
}

async function exists(filePath) {
    try {
        await promises.stat(filePath);
        return true;
    }
    catch (error) {
        if (error?.code === 'ENOENT') {
            return false;
        }
        log.error(`Failed to check '${filePath}' exists. Error:`, error?.message);
    }
}

exports.PRPLCache = PRPLCache;
exports.cwd = cwd;
exports.ensureDir = ensureDir;
exports.ensureFile = ensureFile;
exports.exists = exists;
exports.generateFileSystemTree = generateFileSystemTree;
exports.generateOrRetrieveFileSystemTree = generateOrRetrieveFileSystemTree;
exports.interpolate = interpolate;
exports.interpolateHTML = interpolateHTML;
exports.interpolateList = interpolateList;
exports.interpolatePage = interpolatePage;
exports.log = log;
exports.parsePRPLAttributes = parsePRPLAttributes;
exports.parsePRPLMetadata = parsePRPLMetadata;
exports.readDirSafe = readDirSafe;
exports.transformMarkdown = transformMarkdown;
